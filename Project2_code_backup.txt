%NS QAZI UMER JAMIL
%GC MUDASSAR WAJID

%ROBOT: PUMA 560

close all;
clc;
clear;

deg = pi/180;

L(1) = Revolute('d', 0, 'a', 0, 'alpha', pi/2, 'qlim', [-160 160]*deg );

L(2) = Revolute('d', 0, 'a', 0.4318, 'alpha', 0, 'qlim', [-45 225]*deg );

L(3) = Revolute('d', 0.15005, 'a', 0.0203, 'alpha', -pi/2, 'qlim', [-225 45]*deg );

L(4) = Revolute('d', 0.4318, 'a', 0, 'alpha', pi/2, 'qlim', [-110 170]*deg);

L(5) = Revolute('d', 0, 'a', 0, 'alpha', -pi/2, 'qlim', [-100 100]*deg );

L(6) = Revolute('d', 0, 'a', 0, 'alpha', 0, 'qlim', [-266 266]*deg );

puma560 = SerialLink(L, 'name', 'Puma 560');
puma560.model3d = 'UNIMATE/puma560';

% some useful poses of PUMA 560

qz = [0 0 0 0 0 0]; % zero angles, L shaped pose
qr = [0 pi/2 -pi/2 0 0 0]; % ready pose, arm up
qs = [0 0 -pi/2 0 0 0];
qn=[0 pi/4 pi 0 pi/4  0];

%T = puma560.fkine(qr);
%s = puma560.ikine(T);

%Forward Kinematics - given theeta find T
q = [0 -pi/4 -pi/4 0 pi/8 0]
T = puma560.fkine(q)

%Inverse Kinematics - given T find, theeta
qi = puma560.ikine(T);
qi = puma560.ikine(T, 'pinv');

%Simulation

% The trajectory demonstration has shown how a joint coordinate trajectory
% may be generated

t = [0:.05:4]'; 	% generate a time vector
q = jtraj(qz, qr, t); % generate joint coordinate trajectory

% the overloaded function plot() animates a stick figure robot moving 
% along a trajectory.
puma560.plot(q);

q = jtraj(qr, qs, t); % generate joint coordinate trajectory
puma560.plot(q);

q = jtraj(qs, qn, t); % generate joint coordinate trajectory
puma560.plot(q);
